<?php
/**
 * LandingPages.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.5 (https://modulestudio.de).
 */

namespace RK\LandingPagesModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractLandingPagesEvents
{
    /**
     * The rklandingpagesmodule.page_post_load event is thrown when pages
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterPageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const PAGE_POST_LOAD = 'rklandingpagesmodule.page_post_load';
    
    /**
     * The rklandingpagesmodule.page_pre_persist event is thrown before a new page
     * is created in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterPageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const PAGE_PRE_PERSIST = 'rklandingpagesmodule.page_pre_persist';
    
    /**
     * The rklandingpagesmodule.page_post_persist event is thrown after a new page
     * has been created in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterPageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const PAGE_POST_PERSIST = 'rklandingpagesmodule.page_post_persist';
    
    /**
     * The rklandingpagesmodule.page_pre_remove event is thrown before an existing page
     * is removed from the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterPageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const PAGE_PRE_REMOVE = 'rklandingpagesmodule.page_pre_remove';
    
    /**
     * The rklandingpagesmodule.page_post_remove event is thrown after an existing page
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterPageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const PAGE_POST_REMOVE = 'rklandingpagesmodule.page_post_remove';
    
    /**
     * The rklandingpagesmodule.page_pre_update event is thrown before an existing page
     * is updated in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterPageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const PAGE_PRE_UPDATE = 'rklandingpagesmodule.page_pre_update';
    
    /**
     * The rklandingpagesmodule.page_post_update event is thrown after an existing new page
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterPageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const PAGE_POST_UPDATE = 'rklandingpagesmodule.page_post_update';
    
    /**
     * The rklandingpagesmodule.image_post_load event is thrown when images
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterImageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const IMAGE_POST_LOAD = 'rklandingpagesmodule.image_post_load';
    
    /**
     * The rklandingpagesmodule.image_pre_persist event is thrown before a new image
     * is created in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterImageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const IMAGE_PRE_PERSIST = 'rklandingpagesmodule.image_pre_persist';
    
    /**
     * The rklandingpagesmodule.image_post_persist event is thrown after a new image
     * has been created in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterImageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const IMAGE_POST_PERSIST = 'rklandingpagesmodule.image_post_persist';
    
    /**
     * The rklandingpagesmodule.image_pre_remove event is thrown before an existing image
     * is removed from the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterImageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const IMAGE_PRE_REMOVE = 'rklandingpagesmodule.image_pre_remove';
    
    /**
     * The rklandingpagesmodule.image_post_remove event is thrown after an existing image
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterImageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const IMAGE_POST_REMOVE = 'rklandingpagesmodule.image_post_remove';
    
    /**
     * The rklandingpagesmodule.image_pre_update event is thrown before an existing image
     * is updated in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterImageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const IMAGE_PRE_UPDATE = 'rklandingpagesmodule.image_pre_update';
    
    /**
     * The rklandingpagesmodule.image_post_update event is thrown after an existing new image
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\LandingPagesModule\Event\FilterImageEvent instance.
     *
     * @see RK\LandingPagesModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const IMAGE_POST_UPDATE = 'rklandingpagesmodule.image_post_update';
    
}
