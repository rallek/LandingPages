<?php
/**
 * LandingPages.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.5 (https://modulestudio.de).
 */

namespace RK\LandingPagesModule\Base;

use Doctrine\DBAL\Connection;
use RuntimeException;
use Zikula\Core\AbstractExtensionInstaller;

/**
 * Installer base class.
 */
abstract class AbstractLandingPagesModuleInstaller extends AbstractExtensionInstaller
{
    /**
     * Install the RKLandingPagesModule application.
     *
     * @return boolean True on success, or false
     *
     * @throws RuntimeException Thrown if database tables can not be created or another error occurs
     */
    public function install()
    {
        $logger = $this->container->get('logger');
        $userName = $this->container->get('zikula_users_module.current_user')->get('uname');
    
        // Check if upload directories exist and if needed create them
        try {
            $container = $this->container;
            $uploadHelper = new \RK\LandingPagesModule\Helper\UploadHelper($container->get('translator.default'), $container->get('session'), $container->get('logger'), $container->get('zikula_users_module.current_user'), $container->get('zikula_extensions_module.api.variable'), $container->getParameter('datadir'));
            $uploadHelper->checkAndCreateAllUploadFolders();
        } catch (\Exception $exception) {
            $this->addFlash('error', $exception->getMessage());
            $logger->error('{app}: User {user} could not create upload folders during installation. Error details: {errorMessage}.', ['app' => 'RKLandingPagesModule', 'user' => $userName, 'errorMessage' => $exception->getMessage()]);
        
            return false;
        }
        // create all tables from according entity definitions
        try {
            $this->schemaTool->create($this->listEntityClasses());
        } catch (\Exception $exception) {
            $this->addFlash('error', $this->__('Doctrine Exception') . ': ' . $exception->getMessage());
            $logger->error('{app}: Could not create the database tables during installation. Error details: {errorMessage}.', ['app' => 'RKLandingPagesModule', 'errorMessage' => $exception->getMessage()]);
    
            return false;
        }
    
        // set up all our vars with initial values
        $this->setVar('pageEntriesPerPage', '10');
        $this->setVar('imageEntriesPerPage', '10');
        $this->setVar('enableShrinkingForImagePicture', false);
        $this->setVar('shrinkWidthImagePicture', '800');
        $this->setVar('shrinkHeightImagePicture', '600');
        $this->setVar('thumbnailModeImagePicture',  'inset' );
        $this->setVar('thumbnailWidthImagePictureView', '32');
        $this->setVar('thumbnailHeightImagePictureView', '24');
        $this->setVar('thumbnailWidthImagePictureDisplay', '240');
        $this->setVar('thumbnailHeightImagePictureDisplay', '180');
        $this->setVar('thumbnailWidthImagePictureEdit', '240');
        $this->setVar('thumbnailHeightImagePictureEdit', '180');
        $this->setVar('enabledFinderTypes', [ 'page' ,  'image' ]);
    
        // initialisation successful
        return true;
    }
    
    /**
     * Upgrade the RKLandingPagesModule application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldVersion Version to upgrade from
     *
     * @return boolean True on success, false otherwise
     *
     * @throws RuntimeException Thrown if database tables can not be updated
     */
    public function upgrade($oldVersion)
    {
    /*
        $logger = $this->container->get('logger');
    
        // Upgrade dependent on old version number
        switch ($oldVersion) {
            case '1.0.0':
                // do something
                // ...
                // update the database schema
                try {
                    $this->schemaTool->update($this->listEntityClasses());
                } catch (\Exception $exception) {
                    $this->addFlash('error', $this->__('Doctrine Exception') . ': ' . $exception->getMessage());
                    $logger->error('{app}: Could not update the database tables during the upgrade. Error details: {errorMessage}.', ['app' => 'RKLandingPagesModule', 'errorMessage' => $exception->getMessage()]);
    
                    return false;
                }
        }
    
        // Note there are several helpers available for making migrating your extension from Zikula 1.3 to 1.4 easier.
        // The following convenience methods are each responsible for a single aspect of upgrading to Zikula 1.4.x.
    
        // here is a possible usage example
        // of course 1.2.3 should match the number you used for the last stable 1.3.x module version.
        /* if ($oldVersion = '1.2.3') {
            // rename module for all modvars
            $this->updateModVarsTo14();
            
            // update extension information about this app
            $this->updateExtensionInfoFor14();
            
            // rename existing permission rules
            $this->renamePermissionsFor14();
            
            // rename all tables
            $this->renameTablesFor14();
            
            // remove event handler definitions from database
            $this->dropEventHandlersFromDatabase();
            
            // update module name in the hook tables
            $this->updateHookNamesFor14();
            
            // update module name in the workflows table
            $this->updateWorkflowsFor14();
        } * /
    
        // remove obsolete persisted hooks from the database
        //$this->hookApi->uninstallSubscriberHooks($this->bundle->getMetaData());
    */
    
        // update successful
        return true;
    }
    
    /**
     * Renames the module name for variables in the module_vars table.
     */
    protected function updateModVarsTo14()
    {
        $dbName = $this->getDbName();
        $conn = $this->getConnection();
    
        $conn->executeQuery("
            UPDATE $dbName.module_vars
            SET modname = 'RKLandingPagesModule'
            WHERE modname = 'LandingPages';
        ");
    }
    
    /**
     * Renames this application in the core's extensions table.
     */
    protected function updateExtensionInfoFor14()
    {
        $conn = $this->getConnection();
        $dbName = $this->getDbName();
    
        $conn->executeQuery("
            UPDATE $dbName.modules
            SET name = 'RKLandingPagesModule',
                directory = 'RK/LandingPagesModule'
            WHERE name = 'LandingPages';
        ");
    }
    
    /**
     * Renames all permission rules stored for this app.
     */
    protected function renamePermissionsFor14()
    {
        $conn = $this->getConnection();
        $dbName = $this->getDbName();
    
        $componentLength = strlen('LandingPages') + 1;
    
        $conn->executeQuery("
            UPDATE $dbName.group_perms
            SET component = CONCAT('RKLandingPagesModule', SUBSTRING(component, $componentLength))
            WHERE component LIKE 'LandingPages%';
        ");
    }
    
    /**
     * Renames all (existing) tables of this app.
     */
    protected function renameTablesFor14()
    {
        $conn = $this->getConnection();
        $dbName = $this->getDbName();
    
        $oldPrefix = 'landpa_';
        $oldPrefixLength = strlen($oldPrefix);
        $newPrefix = 'rk_landpa_';
    
        $sm = $conn->getSchemaManager();
        $tables = $sm->listTables();
        foreach ($tables as $table) {
            $tableName = $table->getName();
            if (substr($tableName, 0, $oldPrefixLength) != $oldPrefix) {
                continue;
            }
    
            $newTableName = str_replace($oldPrefix, $newPrefix, $tableName);
    
            $conn->executeQuery("
                RENAME TABLE $dbName.$tableName
                TO $dbName.$newTableName;
            ");
        }
    }
    
    /**
     * Removes event handlers from database as they are now described by service definitions and managed by dependency injection.
     */
    protected function dropEventHandlersFromDatabase()
    {
        \EventUtil::unregisterPersistentModuleHandlers('LandingPages');
    }
    
    /**
     * Updates the module name in the hook tables.
     */
    protected function updateHookNamesFor14()
    {
        $conn = $this->getConnection();
        $dbName = $this->getDbName();
    
        $conn->executeQuery("
            UPDATE $dbName.hook_area
            SET owner = 'RKLandingPagesModule'
            WHERE owner = 'LandingPages';
        ");
    
        $componentLength = strlen('subscriber.landingpages') + 1;
        $conn->executeQuery("
            UPDATE $dbName.hook_area
            SET areaname = CONCAT('subscriber.rklandingpagesmodule', SUBSTRING(areaname, $componentLength))
            WHERE areaname LIKE 'subscriber.landingpages%';
        ");
    
        $conn->executeQuery("
            UPDATE $dbName.hook_binding
            SET sowner = 'RKLandingPagesModule'
            WHERE sowner = 'LandingPages';
        ");
    
        $conn->executeQuery("
            UPDATE $dbName.hook_runtime
            SET sowner = 'RKLandingPagesModule'
            WHERE sowner = 'LandingPages';
        ");
    
        $componentLength = strlen('landingpages') + 1;
        $conn->executeQuery("
            UPDATE $dbName.hook_runtime
            SET eventname = CONCAT('rklandingpagesmodule', SUBSTRING(eventname, $componentLength))
            WHERE eventname LIKE 'landingpages%';
        ");
    
        $conn->executeQuery("
            UPDATE $dbName.hook_subscriber
            SET owner = 'RKLandingPagesModule'
            WHERE owner = 'LandingPages';
        ");
    
        $componentLength = strlen('landingpages') + 1;
        $conn->executeQuery("
            UPDATE $dbName.hook_subscriber
            SET eventname = CONCAT('rklandingpagesmodule', SUBSTRING(eventname, $componentLength))
            WHERE eventname LIKE 'landingpages%';
        ");
    }
    
    /**
     * Updates the module name in the workflows table.
     */
    protected function updateWorkflowsFor14()
    {
        $conn = $this->getConnection();
        $dbName = $this->getDbName();
    
        $conn->executeQuery("
            UPDATE $dbName.workflows
            SET module = 'RKLandingPagesModule'
            WHERE module = 'LandingPages';
        ");
    }
    
    /**
     * Returns connection to the database.
     *
     * @return Connection the current connection
     */
    protected function getConnection()
    {
        $entityManager = $this->container->get('doctrine.orm.default_entity_manager');
        $connection = $entityManager->getConnection();
    
        return $connection;
    }
    
    /**
     * Returns the name of the default system database.
     *
     * @return string the database name
     */
    protected function getDbName()
    {
        return $this->container->getParameter('database_name');
    }
    
    /**
     * Uninstall RKLandingPagesModule.
     *
     * @return boolean True on success, false otherwise
     *
     * @throws RuntimeException Thrown if database tables or stored workflows can not be removed
     */
    public function uninstall()
    {
        $logger = $this->container->get('logger');
    
        try {
            $this->schemaTool->drop($this->listEntityClasses());
        } catch (\Exception $exception) {
            $this->addFlash('error', $this->__('Doctrine Exception') . ': ' . $exception->getMessage());
            $logger->error('{app}: Could not remove the database tables during uninstallation. Error details: {errorMessage}.', ['app' => 'RKLandingPagesModule', 'errorMessage' => $exception->getMessage()]);
    
            return false;
        }
    
        // remove all module vars
        $this->delVars();
    
        // remind user about upload folders not being deleted
        $uploadPath = $this->container->getParameter('datadir') . '/RKLandingPagesModule/';
        $this->addFlash('status', $this->__f('The upload directories at "%path%" can be removed manually.', ['%path%' => $uploadPath]));
    
        // uninstallation successful
        return true;
    }
    
    /**
     * Build array with all entity classes for RKLandingPagesModule.
     *
     * @return array list of class names
     */
    protected function listEntityClasses()
    {
        $classNames = [];
        $classNames[] = 'RK\LandingPagesModule\Entity\PageEntity';
        $classNames[] = 'RK\LandingPagesModule\Entity\ImageEntity';
    
        return $classNames;
    }
}
